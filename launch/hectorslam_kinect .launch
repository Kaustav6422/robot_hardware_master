<?xml version="1.0"?>
<launch>
    
     # ls -l /dev |grep ttyACM
     # sudo chmod 666 /dev/ttyACM0
     # rosrun rosserial_python serial_node.py /dev/ttyACM0

    <param name="/use_sim_time" value="false"/>  
     
    <include file="$(find astra_launch)/launch/astra.launch"/>

    <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" >
        <remap from="image" to="camera/depth/image_raw" />
        <remap from="scan"  to="base_scan" />
        <param name="output_frame_id" value="camera_depth_frame"/>
    </node> 

    <node pkg = "robot_hardware" name = "diff_tf2" type = "diff_tf2" output = "screen" />

    <node name="rosserial_lipo" pkg="rosserial_python" type="serial_node.py" output="screen">
        <param name="~port" value="/dev/ttyACM0" />
        <param name="~baudrate" value="115200" /> <!-- change 115200 for 50:1 motors -->
    </node>

    <!-- transformation between camera_link and base_link-->
    <node pkg="tf" type="static_transform_publisher" name="camera_to_base" args="0.12 0 0 0 0 0 /base_link /camera_link 100" /> 
  
    <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
      <remap from="image" to="camera/depth/image_raw" />   <!--"/usb_cam/image_raw"/> --> 
      <param name="autosize" value="true" /> 
    </node>  


    <include file="$(find hector_slam_launch)/launch/tutorial.launch"/> 

    <!-- Run AMCL -->
    <!-- <include file="$(find robot_hardware)/launch/includes/amcl.launch.xml" /> -->

    <!--<remap from="cmd_vel" to="mobile_base/commands/velocity"/> for kobuki --> 
    <!--param name="base_local_planner" value="eband_local_planner/EBandPlannerROS" /-->


    <!-- Goal point published to /move_base_simple/goal -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
      <param name="footprint_padding" value="0.01" />
      <param name="controller_frequency" value="5.0" /> <!-- The rate in Hz at which to run the control loop and send velocity commands to the base. -->
      <param name="controller_patience" value="3.0" /> <!-- How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.  -->
      <param name="oscillation_timeout" value="30.0" /> <!-- How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout -->
      <param name="oscillation_distance" value="0.5" /> <!-- How far in meters the robot must move to be considered not to be oscillating -->
      <param name="planner_frequency" value="0.0" /> <!-- The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is    received or the local planner reports that its path is blocked -->
      <param name="planner_patience" value="1" />  <!-- How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed. -->
      <param name="controller_patience" value="1" /> <!-- How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.  -->
      
      <param name="recovery_behavior_enabled" value="true" />
      <param name="clearing_rotation_allowed" value="true" />
          
      <rosparam file="$(find robot_hardware)/launch/includes/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find robot_hardware)/launch/includes/costmap_common_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find robot_hardware)/launch/includes/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find robot_hardware)/launch/includes/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find robot_hardware)/launch/includes/base_local_planner_params.yaml" command="load" />  
    
      <param name="global_costmap/global_frame" value="map"/>
      <param name="global_costmap/robot_base_frame" value="base_link"/>
      <param name="global_costmap/laser_scan_sensor/sensor_frame" value="camera_depth_frame"/>
      <param name="global_costmap/laser_scan_sensor/topic" value="base_scan"/>    
  
      <param name="local_costmap/global_frame" value="odom"/>
      <param name="local_costmap/robot_base_frame" value="base_link"/>
      <param name="local_costmap/laser_scan_sensor/sensor_frame" value="camera_depth_frame"/>
      <param name="local_costmap/laser_scan_sensor/topic" value="base_scan"/>
      <param name="local_costmap/obstacle_layer/laser_scan_sensor/topic" value="base_scan"/>
    </node> 

    <!-- <remap from="move_base_simple/goal" to="robot1/move_base_simple/goal"/> --> 
    <!-- <node pkg="rviz" type="rviz" name="rviz" args="-d $(find robot_hardware)/robot_hardware_slam_1.rviz">
      
    </node> --> 

<!-- 

('D = ', [-0.07232943300401876, 0.131167157747717, 0.0009812521268084834, 0.006126998994195763, 0.0])
('K = ', [558.7119569117442, 0.0, 323.32285628006747, 0.0, 562.5328533211821, 246.9020861000646, 0.0, 0.0, 1.0])
('R = ', [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
('P = ', [556.248779296875, 0.0, 326.4721206534159, 0.0, 0.0, 563.2024536132812, 246.70880489899355, 0.0, 0.0, 0.0, 1.0, 0.0])
None
# oST version 5.0 parameters


[image]

width
640

height
480

[narrow_stereo]

camera matrix
558.711957 0.000000 323.322856
0.000000 562.532853 246.902086
0.000000 0.000000 1.000000

distortion
-0.072329 0.131167 0.000981 0.006127 0.000000

rectification
1.000000 0.000000 0.000000
0.000000 1.000000 0.000000
0.000000 0.000000 1.000000

projection
556.248779 0.000000 326.472121 0.000000
0.000000 563.202454 246.708805 0.000000
0.000000 0.000000 1.000000 0.000000

-->


    

</launch> 
